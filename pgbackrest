Primary
/etc/pgbackrest.conf 
[demo_stanza]
pg1-path=/var/lib/pgsql/12/data
pg1-port=5433

[global]
repo1-path=/var/lib/pgbackrest

Create the pgBackRest repository
sudo mkdir -p /var/lib/pgbackrest
sudo chmod 750 /var/lib/pgbackrest
sudo chown postgres:postgres /var/lib/pgbackrest

Configure archive settings
archive_command = 'pgbackrest --stanza=demo archive-push %p'
archive_mode = on
log_filename = 'postgresql.log'
max_wal_senders = 3
wal_level = replica

postgres=# ALTER SYSTEM SET archive_command = 'pgbackrest --stanza=demo_stanza archive-push %p';
ALTER SYSTEM
postgres=# ALTER SYSTEM SET archive_mode = 'on';
ALTER SYSTEM
postgres=# show log_filename ; show max_wal_senders ; show wal_level;
   log_filename    
-------------------
 postgresql-%a.log
(1 row)

 max_wal_senders 
-----------------
 10
(1 row)

 wal_level 
-----------
 replica
(1 row)

Restart Database after changing settings: sudo systemctl restart postgresql-12.service

Config archive-push to use a lower compression level
[global:archive-push]
compress-level=3
#[demo_stanza:archive-push]
#compress-level=3

Configure retention to 2 full backups
It is important to use a long, random passphrase for the cipher key. A good way to generate one is to run: openssl rand -base64 48.
[global]
repo1-path=/var/lib/pgbackrest
repo1-cipher-pass=********
repo1-cipher-type=aes-256-cbc
repo1-retention-full=2

Create Stanza
[postgres@ip-172-31-17-195 ~]$ pgbackrest --stanza=demo_stanza --log-level-console=info stanza-create
2024-07-15 23:22:49.135 P00   INFO: stanza-create command begin 2.46: --exec-id=423852-ffcdb7b0 --log-level-console=info --pg1-path=/var/lib/pgsql/15/data --pg1-port=5433 --repo1-cipher-pass=<redacted> --repo1-cipher-type=aes-256-cbc --repo1-path=/var/lib/pgbackrest --stanza=demo_stanza
2024-07-15 23:22:49.740 P00   INFO: stanza-create for stanza 'demo_stanza' on repo1
2024-07-15 23:22:49.753 P00   INFO: stanza-create command end: completed successfully (621ms)

Check the Stanza
[postgres@ip-172-31-17-195 ~]$ pgbackrest --stanza=demo_stanza --log-level-console=info check
2024-07-15 23:24:35.131 P00   INFO: check command begin 2.46: --exec-id=423944-6bb22ca7 --log-level-console=info --pg1-path=/var/lib/pgsql/15/data --pg1-port=5433 --repo1-cipher-pass=<redacted> --repo1-cipher-type=aes-256-cbc --repo1-path=/var/lib/pgbackrest --stanza=demo_stanza
2024-07-15 23:24:35.735 P00   INFO: check repo1 configuration (primary)
2024-07-15 23:24:35.937 P00   INFO: check repo1 archive for WAL (primary)
ERROR: [082]: WAL segment 000000010000000000000025 was not archived before the 60000ms timeout
       HINT: check the archive_command to ensure that all options are correct (especially --stanza).
       HINT: check the PostgreSQL server log for errors.
       HINT: run the 'start' command if the stanza was previously stopped.
2024-07-15 23:25:35.938 P00   INFO: check command end: aborted with exception [082]

Errors:
ERROR: [082]: WAL segment 000000010000000000000025 was not archived before the 60000ms timeout
Check for DB logs for errors
In our case archive_command needs to be corrected as per hint.

[postgres@ip-172-31-17-195 ~]$ pgbackrest --stanza=demo_stanza --log-level-console=info check
2024-07-15 23:30:51.942 P00   INFO: check command begin 2.46: --exec-id=424131-950a42ff --log-level-console=info --pg1-path=/var/lib/pgsql/15/data --pg1-port=5433 --repo1-cipher-pass=<redacted> --repo1-cipher-type=aes-256-cbc --repo1-path=/var/lib/pgbackrest --stanza=demo_stanza
2024-07-15 23:30:52.547 P00   INFO: check repo1 configuration (primary)
2024-07-15 23:30:52.748 P00   INFO: check repo1 archive for WAL (primary)
2024-07-15 23:30:52.849 P00   INFO: WAL segment 000000010000000000000028 successfully archived to '/var/lib/pgbackrest/archive/demo_stanza/15-1/0000000100000000/000000010000000000000028-d2572c1070d2171df219cad28c8d439bc49a0890.gz' on repo1
2024-07-15 23:30:52.849 P00   INFO: check command end: completed successfully (910ms)

Trigger Backup:
pgbackrest --stanza=demo_stanza --log-level-console=info backup
pgbackrest --stanza=demo_stanza --log-level-console=info backup --type=diff
pgbackrest --stanza=demo_stanza --log-level-console=info backup --type=incr

Check backups using pgbackrest info
Schedule using cron job

Logs for analysis:
[postgres@ip-172-31-17-195 demo_stanza]$ cd /var/log/pgbackrest/
[postgres@ip-172-31-17-195 pgbackrest]$ ls -l
total 24
-rw-r-----. 1 postgres postgres 5035 Jul 15 23:35 demo_stanza-archive-push-async.log
-rw-r-----. 1 postgres postgres 4105 Jul 15 23:35 demo_stanza-backup.log
-rw-r-----. 1 postgres postgres 1182 Jul 15 23:35 demo_stanza-expire.log
-rw-r-----. 1 postgres postgres 1268 Jul 15 23:22 demo_stanza-stanza-create.log
[postgres@ip-172-31-17-195 pgbackrest]$ view demo_stanza-backup.log

======================================
Restore:

Stop the demo cluster and delete the pg_control file
[ec2-user@ip-172-31-17-195 ~]$ sudo systemctl stop postgresql-13.service
sudo -u postgres rm /var/lib/pgsql/13/data/global/pg_control

Clear data directory:
sudo rm -rf /var/lib/pgsql/13/data

pgbackrest_restore.conf
[postgres@ip-172-31-17-195 ~]$ cat pgbackrest_restore.conf
[global]
repo1-path=/var/lib/pgbackrest
repo1-cipher-pass=******
repo1-cipher-type=aes-256-cbc
process-max=2

[demo_stanza]
pg1-path=/var/lib/pgsql/13/data
pg1-port=5432

[global:archive-push]
compress-level=3
#[demo_stanza:archive-push]
#compress-level=3

pgbackrest --config=/var/lib/pgsql/pgbackrest_restore.conf --stanza=demo_stanza --log-level-console=info restore 

====
mkdir data_15
chmod 700 data_15/

[postgres@ip-172-31-17-195 data]$ cat /var/lib/pgsql/pgbackrest_restore.conf 
[global]
repo1-path=/var/lib/pgbackrest
repo1-cipher-pass=******
repo1-cipher-type=aes-256-cbc
process-max=2

[demo_stanza]
pg1-path=/var/lib/pgsql/data_15
pg1-port=5432

[global:archive-push]
compress-level=3
#[demo_stanza:archive-push]
#compress-level=3

[postgres@ip-172-31-17-195 data]$ pgbackrest --config=/var/lib/pgsql/pgbackrest_restore.conf --stanza=demo_stanza --log-level-console=info restore 
2024-07-16 00:00:24.859 P00   INFO: restore command begin 2.46: --config=/var/lib/pgsql/pgbackrest_restore.conf --exec-id=424750-e8de8f58 --log-level-console=info --pg1-path=/var/lib/pgsql/data_15 --process-max=2 --repo1-cipher-pass=<redacted> --repo1-cipher-type=aes-256-cbc --repo1-path=/var/lib/pgbackrest --stanza=demo_stanza
2024-07-16 00:00:24.872 P00   INFO: repo1: restore backup set 20240715-233332F_20240715-233520I, recovery will start at 2024-07-15 23:35:20
2024-07-16 00:00:24.872 P00   INFO: remap data directory to '/var/lib/pgsql/data_15'
2024-07-16 00:00:26.975 P00   INFO: write updated /var/lib/pgsql/data_15/postgresql.auto.conf
2024-07-16 00:00:26.979 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2024-07-16 00:00:26.980 P00   INFO: restore size = 37.9MB, file total = 1600
2024-07-16 00:00:26.981 P00   INFO: restore command end: completed successfully (2124ms)

[postgres@ip-172-31-17-195 data]$ /usr/pgsql-15/bin/pg_ctl start -D /var/lib/pgsql/data_15
waiting for server to start....2024-07-16 00:01:15.366 UTC [424782] LOG:  redirecting log output to logging collector process
2024-07-16 00:01:15.366 UTC [424782] HINT:  Future log output will appear in directory "log".
 done
server started

===========================
Monitoring!!!!!!


CREATE SCHEMA AND FUCNTION for monitoring:

[postgres@ip-172-31-17-195 pgbackrest]$ cat pgbackrest-info.sql
-- An example of monitoring pgBackRest from within PostgreSQL
--
-- Use copy to export data from the pgBackRest info command into the jsonb
-- type so it can be queried directly by PostgreSQL.

-- Create monitor schema
create schema monitor;

-- Get pgBackRest info in JSON format
create function monitor.pgbackrest_info()
    returns jsonb AS $$
declare
    data jsonb;
begin
    -- Create a temp table to hold the JSON data
    create temp table temp_pgbackrest_data (data text);

    -- Copy data into the table directly from the pgBackRest info command
    copy temp_pgbackrest_data (data)
        from program
            'pgbackrest --output=json info' (format text);

    select replace(temp_pgbackrest_data.data, E'\n', '\n')::jsonb
      into data
      from temp_pgbackrest_data;

    drop table temp_pgbackrest_data;

    return data;
end $$ language plpgsql;


Query last backup:
[postgres@ip-172-31-17-195 pgbackrest]$ cat pgbackrest-query.sql 
-- Get last successful backup for each stanza
--
-- Requires the monitor.pgbackrest_info function.
with stanza as
(
    select data->'name' as name,
           data->'backup'->(
               jsonb_array_length(data->'backup') - 1) as last_backup,
           data->'archive'->(
               jsonb_array_length(data->'archive') - 1) as current_archive
      from jsonb_array_elements(monitor.pgbackrest_info()) as data
)
select name,
       to_timestamp(
           (last_backup->'timestamp'->>'stop')::numeric) as last_successful_backup,
       current_archive->>'max' as last_archived_wal
  from stanza;

Usage:
  [postgres@ip-172-31-17-195 pgbackrest]$ psql -p 5433 -f pgbackrest-query.sql
     name      | last_successful_backup |    last_archived_wal     
---------------+------------------------+--------------------------
 "demo_stanza" | 2024-07-15 23:35:21+00 | 00000001000000000000002E
(1 row)
